// <auto-generated />
using System;
using APISPOTIFY.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APISPOTIFY.Migrations
{
    [DbContext(typeof(MusicAppDBContext))]
    [Migration("20211231091021_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APISPOTIFY.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AlbumID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("DeletedON");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Premium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("APISPOTIFY.Models.AlbumLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("AlbumID");

                    b.HasKey("UserId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumLike");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "CountryName" }, "UQ_Countries_CountryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Genre");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LanguageId");

                    b.HasIndex(new[] { "LanguageName" }, "UQ_Languages_LanguageName")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<bool>("PaymnetStatus")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("money");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PlaylistPodcast", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int")
                        .HasColumnName("PodcastID");

                    b.HasKey("PlaylistId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PlaylistPodcasts");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.HasKey("PlaylistId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Podcast", b =>
                {
                    b.Property<int>("PodcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PodcastID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("DeletedON");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PodcastFile")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Premium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StreamedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("StreamedON");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PodcastId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PodcastLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int")
                        .HasColumnName("PodcastID");

                    b.HasKey("UserId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastLike");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("DeletedON");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("Picture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex(new[] { "UserId" }, "UQ_Profile_UserID")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SongID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("AlbumID");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("DeletedON");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("PublishedON");

                    b.Property<string>("SongFile")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("SongId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongArtist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SongId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SongArtists");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongGenre", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SongGenres");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.HasKey("UserId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("SongLike");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasComputedColumnSql("(dateadd(month,[Months],[StartTimestamp]))", true);

                    b.Property<int>("Months")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("APISPOTIFY.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedON")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("DeletedON");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsVerfied")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedON");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APISPOTIFY.Models.UserLanguage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Album", b =>
                {
                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Albums")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.AlbumLike", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Album", "Album")
                        .WithMany("AlbumLikes")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Albums_AlbumLike")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("AlbumLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_AlbumLike")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Payment", b =>
                {
                    b.HasOne("APISPOTIFY.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_PaymentMethods_PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("FK_Subscription_Payment")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Payment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Playlist", b =>
                {
                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Playlists")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PlaylistPodcast", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Playlist", "Playlist")
                        .WithMany("PlaylistPodcasts")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_Playlists_PlaylistPodcasts")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.Podcast", "Podcast")
                        .WithMany("PlaylistPodcasts")
                        .HasForeignKey("PodcastId")
                        .HasConstraintName("FK_Podcasts_PlaylistPodcasts")
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PlaylistSong", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_Playlists_PlaylistSongs")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .HasConstraintName("FK_Songs_PlaylistSongs")
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Podcast", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Language", "Language")
                        .WithMany("Podcasts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Languages_Podcasts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("Podcasts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Podcasts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PodcastLike", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Podcast", "Podcast")
                        .WithMany("PodcastLikes")
                        .HasForeignKey("PodcastId")
                        .HasConstraintName("FK_Podcasts_PodcastLike")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("PodcastLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_PodcastLike")
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Profile", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Country", "Country")
                        .WithMany("Profiles")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Countries_Profile");

                    b.HasOne("APISPOTIFY.Models.Gender", "Gender")
                        .WithMany("Profiles")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Gender_Profile");

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("APISPOTIFY.Models.Profile", "UserId")
                        .HasConstraintName("FK_Users_Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Song", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Albums_Songs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APISPOTIFY.Models.Language", "Language")
                        .WithMany("Songs")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Languages_Songs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongArtist", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Song", "Song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .HasConstraintName("FK_Songs_SongArtists")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("SongArtists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_SongArtists")
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongGenre", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Genre", "Genre")
                        .WithMany("SongGenres")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_Genres_SongGenres")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.Song", "Song")
                        .WithMany("SongGenres")
                        .HasForeignKey("SongId")
                        .HasConstraintName("FK_Songs_SongGenres")
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("APISPOTIFY.Models.SongLike", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Song", "Song")
                        .WithMany("SongLikes")
                        .HasForeignKey("SongId")
                        .HasConstraintName("FK_Songs_SongLike")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("SongLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_SongLike")
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Subscription", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_Plans_Subscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Subscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.User", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Roles_Users")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APISPOTIFY.Models.UserLanguage", b =>
                {
                    b.HasOne("APISPOTIFY.Models.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Languages_UserLanguages")
                        .IsRequired();

                    b.HasOne("APISPOTIFY.Models.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_UserLanguages")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Album", b =>
                {
                    b.Navigation("AlbumLikes");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Country", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Gender", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Genre", b =>
                {
                    b.Navigation("SongGenres");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Language", b =>
                {
                    b.Navigation("Podcasts");

                    b.Navigation("Songs");

                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("APISPOTIFY.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Plan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistPodcasts");

                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Podcast", b =>
                {
                    b.Navigation("PlaylistPodcasts");

                    b.Navigation("PodcastLikes");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Song", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("SongArtists");

                    b.Navigation("SongGenres");

                    b.Navigation("SongLikes");
                });

            modelBuilder.Entity("APISPOTIFY.Models.Subscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("APISPOTIFY.Models.User", b =>
                {
                    b.Navigation("AlbumLikes");

                    b.Navigation("Albums");

                    b.Navigation("Payments");

                    b.Navigation("Playlists");

                    b.Navigation("PodcastLikes");

                    b.Navigation("Podcasts");

                    b.Navigation("Profile");

                    b.Navigation("SongArtists");

                    b.Navigation("SongLikes");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
