
-- 1. COUNTRIES

CREATE TABLE Countries(
		CountryID INT NOT NULL IDENTITY(1,1)
	,	CountryName VARCHAR(30) NOT NULL
	,	CONSTRAINT PK_Countries_CountyID PRIMARY KEY(CountryID) 	
	,	CONSTRAINT UQ_Countries_CountryName UNIQUE(CountryName)
)

-- 2. LANGUAGES
CREATE TABLE Languages(
		LanguageID INT NOT NULL IDENTITY(1,1)
	,	LanguageName NVARCHAR(20) NOT NULL
	,	CONSTRAINT PK_Languages_LanguageID PRIMARY KEY(LanguageID)
	,	CONSTRAINT UQ_Languages_LanguageName UNIQUE(LanguageName)
)


-- 3. ROLES

CREATE TABLE Roles(
		RoleID INT NOT NULL IDENTITY(1,1)
	,	RoleType VARCHAR(6) NOT NULL
	,	CONSTRAINT PK_Roles_RoleID PRIMARY KEY(RoleID)
)

-- 4. USERS 

create TABLE User(
		UserID INT NOT NULL IDENTITY(1,1)
	
	,	UserName VARCHAR(30) NOT NULL
	,	Email NVARCHAR(100) NOT NULL 

	,	Password VARCHAR(20) NOT NULL 

	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Users_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Users_UserID PRIMARY KEY(UserID) 	
	
	,	CONSTRAINT UQ_Users_Email UNIQUE(Email)
	,	CONSTRAINT CHK_Users_Email CHECK(Email LIKE '%_@__%.__%')
);
ALTER TABLE Users
ADD Id nvarchar(450)  NULL;

ALTER TABLE Users DROP PK_Users_UserID ;

ALTER TABLE Users
ADD ID nvarchar(450) NULL;


-- 5. GENDER 

CREATE TABLE Gender(
		GenderID INT NOT NULL IDENTITY(1,1)
	,	Name  VARCHAR(6) NOT NULL
	,	CONSTRAINT PK_Gender_GenderID PRIMARY KEY(GenderID) 
)

-- 6. PROFILE

CREATE TABLE Profile(
		ProfileID INT NOT NULL IDENTITY(1,1)
	,	UserID INT NOT NULL
	,	DOB DATE 
	,	Bio VARCHAR(MAX)  
	,	Picture VARCHAR(MAX)
	,	GenderID  INT
	,	CountryID INT 
	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Profile_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Pofile_ProfileID PRIMARY KEY(ProfileID) 
	,	CONSTRAINT FK_Users_Profile FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Countries_Profile FOREIGN KEY(CountryID) REFERENCES Countries(CountryID) 
	,	CONSTRAINT FK_Gender_Profile FOREIGN KEY(GenderID) REFERENCES Gender(GenderID)
	,	CONSTRAINT UQ_Profile_UserID UNIQUE(UserID)
	,	CONSTRAINT CHK_Profile_DOB CHECK(FLOOR(DATEDIFF(DAY, DOB, GETDATE()) / 365.25) >= 10)
)

ALTER TABLE Profile
DROP CONSTRAINT FK_Users_Profile;
-- 7. USERLANGUAGES

CREATE TABLE UserLanguages(
		UserId INT NOT NULL
	,	LanguageID INT NOT NULL
	,	CONSTRAINT PK_UserLanguages PRIMARY KEY(UserId, LanguageID)  
	,	CONSTRAINT FK_Users_UserLanguages FOREIGN KEY(UserID) REFERENCES Users(UserID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Languages_UserLanguages FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
)
ALTER TABLE UserLanguages
DROP CONSTRAINT FK_Users_UserLanguages;
-- 8. ALBUMS

CREATE TABLE Albums(
		AlbumID INT NOT NULL IDENTITY(1,1)
	,	UserID INT NOT NULL
	,	Name NVARCHAR(30) NOT NULL
	,	Picture VARCHAR(MAX) NOT NULL
	,	Description NVARCHAR(100)
	,	Premium BIT CONSTRAINT DF_Albums_Premium DEFAULT 0
	,	Active BIT CONSTRAINT DF_Albums_Active DEFAULT 1
	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Albums_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Albums_AlbumID PRIMARY KEY(AlbumID)
	,	CONSTRAINT FK_Users_Albums FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
)
ALTER TABLE Albums
DROP CONSTRAINT FK_Users_Albums;
-- 9. GENRES

CREATE TABLE Genres(
		GenreId INT NOT NULL IDENTITY(1,1)
	,	Genre VARCHAR(20) NOT NULL		
	,	CONSTRAINT PK_Genres_GenresId PRIMARY KEY(GenreId) 	
)

-- 10. SONGS

CREATE TABLE Songs(
		SongID INT NOT NULL IDENTITY(1,1)
	,	AlbumID INT 
	,	Name NVARCHAR(50) NOT NULL
	,	Picture VARCHAR(MAX) NOT NULL
	,	LanguageID INT NOT NULL
	,	SongFile VARCHAR(MAX) NOT NULL
	,	Duration Decimal(4,2) NOT NULL
	,	PublishedON DATETIME
	,	Active BIT CONSTRAINT DF_Songs_Active DEFAULT 1
	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Songs_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	ViewCount INT NOT NULL DEFAULT 0
	,	Downloads INT NOT NULL DEFAULT 0
	,	CONSTRAINT PK_Songs_SongID PRIMARY KEY(SongID)
	,	CONSTRAINT FK_Albums_Songs FOREIGN KEY(AlbumID) REFERENCES Albums(AlbumID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Languages_Songs FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID) ON DELETE CASCADE ON UPDATE CASCADE
)

-- 11. SONGGENRES

CREATE TABLE SongGenres (
		SongID INT NOT NULL
	,	GenreId INT NOT NULL
	,	CONSTRAINT PK_SongGenres PRIMARY KEY(SongID, GenreId)
	,	CONSTRAINT FK_Songs_SongGenres FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Genres_SongGenres FOREIGN KEY(GenreId) REFERENCES Genres(GenreId) ON DELETE NO ACTION ON UPDATE NO ACTION 
)

-- 12. SONGARTISTS

CREATE TABLE SongArtists(
		SongID INT NOT NULL
	,	UserID INT NOT NULL
	,	CONSTRAINT PK_SongArtists PRIMARY KEY(SongID, UserID)
	,	CONSTRAINT FK_Songs_SongArtists FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Users_SongArtists FOREIGN KEY(UserID) REFERENCES Users(UserID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
)
ALTER TABLE SongArtists
DROP CONSTRAINT FK_Users_SongArtists;

-- 13. PODCASTS

CREATE TABLE Podcasts(
		PodcastID INT NOT NULL IDENTITY(1,1)
	,	UserID INT NOT NULL 
	,	Name VARCHAR(30) NOT NULL
	,	LanguageID INT NOT NULL
	,	PodcastFile VARCHAR(MAX) NOT NULL  
	,	StreamedON DATETIME
	,	Duration DECIMAL(6,2) NOT NULL 
	,	Premium BIT CONSTRAINT DF_Podcasts_Premium DEFAULT 0
	,	Active BIT CONSTRAINT DF_Podcasts_Active DEFAULT 1
	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Podcasts_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	ViewCount INT NOT NULL DEFAULT 0
	,	Downloads INT NOT NULL DEFAULT 0
	,	CONSTRAINT PK_Podcasts_PodcastID PRIMARY KEY(PodcastID)
	,	CONSTRAINT FK_Users_Podcasts FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Languages_Podcasts FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID) ON DELETE CASCADE ON UPDATE CASCADE
) 
ALTER TABLE Podcasts
DROP CONSTRAINT FK_Users_Podcasts;
-- 14, 15, 16. LIKES

CREATE TABLE SongLike(
		UserId INT NOT NULL
	,	SongID INT NOT NULL
	,	CONSTRAINT PK_SongLike PRIMARY KEY(UserId, SongID)   
	,	CONSTRAINT FK_Users_SongLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Songs_SongLike FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
)

ALTER TABLE SongLike
DROP CONSTRAINT FK_Users_SongLike;

CREATE TABLE PodcastLike(
		UserId INT NOT NULL
	,	PodcastID INT NOT NULL
	,	CONSTRAINT PK_PodcastLike PRIMARY KEY(UserId, PodcastID)   
	,	CONSTRAINT FK_Users_PodcastLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Podcasts_PodcastLike FOREIGN KEY(PodcastID) REFERENCES Podcasts(PodcastID) ON DELETE NO ACTION ON UPDATE NO ACTION 
)
ALTER TABLE PodcastLike
DROP CONSTRAINT FK_Users_PodcastLike;

CREATE TABLE AlbumLike(
		UserId INT 
	,	AlbumID INT 
	,	CONSTRAINT PK_AlbumLike PRIMARY KEY(UserId, AlbumID)   
	,	CONSTRAINT FK_Users_AlbumLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Albums_AlbumLike FOREIGN KEY(AlbumID) REFERENCES Albums(AlbumID) ON DELETE NO ACTION ON  UPDATE NO ACTION 
)
ALTER TABLE AlbumLike
DROP CONSTRAINT FK_Users_AlbumLike;
-- 17, 18, 19. PLAYLISTS

CREATE TABLE Playlists(
		PlaylistID INT NOT NULL IDENTITY(1,1)
	,	UserID INT NOT NULL
	,	Title NVARCHAR(30) NOT NULL 
	,	CreatedON DATETIME NOT NULL CONSTRAINT DF_Playlists_CreatedON DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	CONSTRAINT PK_Playlists_PlaylistID PRIMARY KEY(PlaylistID)
	,	CONSTRAINT FK_Users_Playlists FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
)
ALTER TABLE Playlists
DROP CONSTRAINT FK_Users_Playlists;

CREATE TABLE PlaylistSongs(
		PlaylistID INT NOT NULL
	,	SongID INT NOT NULL
	,	CONSTRAINT PK_PlaylistSongs PRIMARY KEY(PlaylistID, SongID) 
	,	CONSTRAINT FK_Playlists_PlaylistSongs FOREIGN KEY(PlaylistID) REFERENCES Playlists(PlaylistID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Songs_PlaylistSongs FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION  ON UPDATE NO ACTION 
)

CREATE TABLE PlaylistPodcasts(
		PlaylistID INT NOT NULL
	,	PodcastID INT NOT NULL
	,	CONSTRAINT PK_PlaylistPodcasts PRIMARY KEY(PlaylistID, PodcastID) 
	,	CONSTRAINT FK_Playlists_PlaylistPodcasts FOREIGN KEY(PlaylistID) REFERENCES Playlists(PlaylistID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Podcasts_PlaylistPodcasts FOREIGN KEY(PodcastID) REFERENCES Podcasts(PodcastID) ON DELETE NO ACTION  ON UPDATE NO ACTION 
)

-- 20. PLANS

CREATE TABLE Plans(
		PlanID INT NOT NULL IDENTITY(1,1)
	,	PlanName VARCHAR(20) NOT NULL
	,	PricePerMonth MONEY NOT NULL
	,	CONSTRAINT PK_Plan_PlanID PRIMARY KEY(PlanID)
)

-- 21. SUBSCRIPTION

CREATE TABLE Subscription(
		SubscriptionID INT NOT NULL IDENTITY(1,1)
	,	UserID INT NOT NULL
	,	PlanId INT NOT NULL
	,	Months INT NOT NULL CONSTRAINT DF_Subscription_Months DEFAULT  1
	,	StartTimestamp DATETIME CONSTRAINT DF_Subscription_StartTimestamp DEFAULT CURRENT_TIMESTAMP
	,	EndTimeStamp AS DATEADD(Month, Months, StartTimestamp)
	,	CONSTRAINT PK_Subscription_SubscriptionID PRIMARY KEY(SubscriptionID)
	,	CONSTRAINT FK_Users_Subscription FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Plans_Subscription FOREIGN KEY(PlanId) REFERENCES Plans(PlanId) ON DELETE CASCADE ON UPDATE CASCADE
	-- check
)

ALTER TABLE Subscription
DROP CONSTRAINT FK_Users_Subscription;
-- 22. PAYMENTMETHODS	

CREATE TABLE PaymentMethods(
		PaymentMethodID INT NOT NULL IDENTITY(1,1) 
	,	Name VARCHAR(20) NOT NULL
	,	CONSTRAINT PK_PaymentMethods_PaymentMethodID PRIMARY KEY(PaymentMethodID)
)

-- 23. PAYMENT 

CREATE TABLE Payment(
		PaymentID INT NOT NULL IDENTITY(1,1) 
	,	UserID INT NOT NULL
	,	SubscriptionID INT NOT NULL
	,	PaymentMethodID INT NOT NULL
	,	PaymnetStatus BIT NOT NULL CONSTRAINT DF_Payment_PaymnetStatus DEFAULT 0
	,	CONSTRAINT PK_Payment_PaymentID PRIMARY KEY(PaymentID)
	,	CONSTRAINT FK_Users_Payment FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE  ON UPDATE  CASCADE
	,	CONSTRAINT FK_Subscription_Payment FOREIGN KEY(SubscriptionID) REFERENCES Subscription(SubscriptionID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_PaymentMethods_PaymentMethodID FOREIGN KEY(PaymentMethodID) REFERENCES PaymentMethods(PaymentMethodID) ON DELETE CASCADE ON UPDATE CASCADE
)
ALTER TABLE Payment
DROP CONSTRAINT FK_Users_Payment;

ALTER TABLE Subscription
DROP COLUMN EndTimeStamp

ALTER TABLE Subscription
ALTER COLUMN StartTimestamp DATETIME NOT NULL

ALTER TABLE Subscription
ADD EndTimeStamp AS DATEADD(Month, Months, StartTimestamp) PERSISTED

ALTER TABLE Subscription
ADD CONSTRAINT CHK_Subscription_EndTimeStamp CHECK(EndTimeStamp = DATEADD(Month, Months, StartTimestamp))

SELECT * FROM SYS.tables

