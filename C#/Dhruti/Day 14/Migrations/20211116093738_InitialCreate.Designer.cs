// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToyShop.Models;

namespace ToyShop.Migrations
{
    [DbContext(typeof(ToyCompanyContext))]
    [Migration("20211116093738_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ToyShop.Models.Customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.HasKey("customerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ToyShop.Models.CustomerAddress", b =>
                {
                    b.Property<int>("addressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("addressId");

                    b.HasIndex("customerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ToyShop.Models.Item", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("toyId")
                        .HasColumnType("int");

                    b.HasKey("itemId");

                    b.HasIndex("orderId");

                    b.HasIndex("toyId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ToyShop.Models.Order", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("addressId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("orderId");

                    b.HasIndex("addressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ToyShop.Models.Toy", b =>
                {
                    b.Property<int>("toyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ToyPlantId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("toyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("toyPrice")
                        .HasColumnType("float");

                    b.HasKey("toyId");

                    b.HasIndex("ToyPlantId");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("ToyShop.Models.ToyPlant", b =>
                {
                    b.Property<int>("plantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("plantCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("toyTypeId")
                        .HasColumnType("int");

                    b.HasKey("plantId");

                    b.HasIndex("toyTypeId")
                        .IsUnique();

                    b.ToTable("ToyPlants");
                });

            modelBuilder.Entity("ToyShop.Models.ToyType", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("typeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typeId");

                    b.ToTable("ToyTypes");
                });

            modelBuilder.Entity("ToyShop.Models.CustomerAddress", b =>
                {
                    b.HasOne("ToyShop.Models.Customer", "CustomerNavigation")
                        .WithMany("AddressNavigation")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Item", b =>
                {
                    b.HasOne("ToyShop.Models.Order", "OrderNavigation")
                        .WithMany("ItemNavigation")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Models.Toy", "ToyNavigation")
                        .WithMany("ItemNavigation")
                        .HasForeignKey("toyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderNavigation");

                    b.Navigation("ToyNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Order", b =>
                {
                    b.HasOne("ToyShop.Models.CustomerAddress", "CustomerAddressNavigation")
                        .WithMany("OrderNavigation")
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAddressNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Toy", b =>
                {
                    b.HasOne("ToyShop.Models.ToyPlant", "ToyPlantNavigation")
                        .WithMany("ToyNavigation")
                        .HasForeignKey("ToyPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToyPlantNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.ToyPlant", b =>
                {
                    b.HasOne("ToyShop.Models.ToyType", "ToyTypeNavigation")
                        .WithOne("ToyPlantNavigation")
                        .HasForeignKey("ToyShop.Models.ToyPlant", "toyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToyTypeNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Customer", b =>
                {
                    b.Navigation("AddressNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.CustomerAddress", b =>
                {
                    b.Navigation("OrderNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Order", b =>
                {
                    b.Navigation("ItemNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.Toy", b =>
                {
                    b.Navigation("ItemNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.ToyPlant", b =>
                {
                    b.Navigation("ToyNavigation");
                });

            modelBuilder.Entity("ToyShop.Models.ToyType", b =>
                {
                    b.Navigation("ToyPlantNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
