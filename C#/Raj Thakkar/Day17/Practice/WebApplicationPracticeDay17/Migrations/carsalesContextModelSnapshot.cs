// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationPracticeDay17.Models;

namespace WebApplicationPracticeDay17.Migrations
{
    [DbContext(typeof(carsalesContext))]
    partial class carsalesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Car", b =>
                {
                    b.Property<int>("Vin")
                        .HasColumnType("int")
                        .HasColumnName("VIN");

                    b.Property<double>("AskPrice")
                        .HasColumnType("float");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<double>("InvoicePrice")
                        .HasColumnType("float");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Mileage")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Year")
                        .HasColumnType("numeric(4,0)");

                    b.HasKey("Vin");

                    b.HasIndex(new[] { "CarId" }, "IX_Cars")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Dealership", b =>
                {
                    b.Property<int>("DealershipId")
                        .HasColumnType("int")
                        .HasColumnName("DealershipID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DealershipId");

                    b.ToTable("Dealerships");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int")
                        .HasColumnName("DealershipID");

                    b.Property<int>("Vin")
                        .HasColumnType("int")
                        .HasColumnName("VIN");

                    b.HasKey("InventoryId");

                    b.HasIndex("DealershipId");

                    b.HasIndex("Vin");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.ReportsTo", b =>
                {
                    b.Property<int>("ReportsToId")
                        .HasColumnType("int")
                        .HasColumnName("ReportsToID");

                    b.Property<int>("ManagingSalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ManagingSalesPersonID");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("ReportsToId");

                    b.HasIndex("ManagingSalesPersonId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("ReportsTo");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int")
                        .HasColumnName("DealershipID");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("date");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<int>("Vin")
                        .HasColumnType("int")
                        .HasColumnName("VIN");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealershipId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("Vin");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SalesPersonId");

                    b.ToTable("SalesPersons");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.TransactionIndex9805664507834fe2Aabd131d1864ebfc", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("_TransactionIndex_98056645-0783-4fe2-aabd-131d1864ebfc");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.WorksAt", b =>
                {
                    b.Property<int>("WorksAtId")
                        .HasColumnType("int")
                        .HasColumnName("WorksAtID");

                    b.Property<int>("BaseSalaryForMonth")
                        .HasColumnType("int");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int")
                        .HasColumnName("DealershipID");

                    b.Property<int>("MonthWorked")
                        .HasColumnType("int");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("WorksAtId");

                    b.HasIndex("DealershipId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("WorksAt");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Inventory", b =>
                {
                    b.HasOne("WebApplicationPracticeDay17.Models.Dealership", "Dealership")
                        .WithMany("Inventories")
                        .HasForeignKey("DealershipId")
                        .HasConstraintName("FK_Inventory_Dealerships")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.Car", "VinNavigation")
                        .WithMany("Inventories")
                        .HasForeignKey("Vin")
                        .HasConstraintName("FK_Inventory_Cars")
                        .IsRequired();

                    b.Navigation("Dealership");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.ReportsTo", b =>
                {
                    b.HasOne("WebApplicationPracticeDay17.Models.SalesPerson", "ManagingSalesPerson")
                        .WithMany("ReportsToManagingSalesPeople")
                        .HasForeignKey("ManagingSalesPersonId")
                        .HasConstraintName("FK_ManagingSalesPersonID")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.SalesPerson", "SalesPerson")
                        .WithMany("ReportsToSalesPeople")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK_SalesPersonID")
                        .IsRequired();

                    b.Navigation("ManagingSalesPerson");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Sale", b =>
                {
                    b.HasOne("WebApplicationPracticeDay17.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.Dealership", "Dealership")
                        .WithMany("Sales")
                        .HasForeignKey("DealershipId")
                        .HasConstraintName("FK_Sales_Dealerships")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.SalesPerson", "SalesPerson")
                        .WithMany("Sales")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK_Sales_SalesPersons")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.Car", "VinNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("Vin")
                        .HasConstraintName("FK_Sales_Cars")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Dealership");

                    b.Navigation("SalesPerson");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.WorksAt", b =>
                {
                    b.HasOne("WebApplicationPracticeDay17.Models.Dealership", "Dealership")
                        .WithMany("WorksAts")
                        .HasForeignKey("DealershipId")
                        .HasConstraintName("FK_WorksAt_Dealerships")
                        .IsRequired();

                    b.HasOne("WebApplicationPracticeDay17.Models.SalesPerson", "SalesPerson")
                        .WithMany("WorksAts")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK_WorksAt_SalesPersons")
                        .IsRequired();

                    b.Navigation("Dealership");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Car", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.Dealership", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Sales");

                    b.Navigation("WorksAts");
                });

            modelBuilder.Entity("WebApplicationPracticeDay17.Models.SalesPerson", b =>
                {
                    b.Navigation("ReportsToManagingSalesPeople");

                    b.Navigation("ReportsToSalesPeople");

                    b.Navigation("Sales");

                    b.Navigation("WorksAts");
                });
#pragma warning restore 612, 618
        }
    }
}
