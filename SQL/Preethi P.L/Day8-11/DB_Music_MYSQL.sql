CREATE DATABASE DB_MUSIC

-- 1. COUNTRIES

CREATE TABLE Countries(
		CountryID INT NOT NULL AUTO_INCREMENT
	,	CountryName VARCHAR(30) NOT NULL
	,	CONSTRAINT PK_Countries_CountyID PRIMARY KEY(CountryID) 	
	,	CONSTRAINT UQ_Countries_CountryName UNIQUE(CountryName)
);

-- 2. LANGUAGES

CREATE TABLE Languages(
		LanguageID INT NOT NULL AUTO_INCREMENT
	,	LanguageName VARCHAR(20) NOT NULL
	,	CONSTRAINT PK_Languages_LanguageID PRIMARY KEY(LanguageID)
	,	CONSTRAINT UQ_Languages_LanguageName UNIQUE(LanguageName)
);

-- 3. ROLES

CREATE TABLE Roles(
		RoleID INT NOT NULL AUTO_INCREMENT
	,	RoleType VARCHAR(6) NOT NULL
	,	CONSTRAINT PK_Roles_RoleID PRIMARY KEY(RoleID)
);

-- 4. USERS 

CREATE TABLE Users(
		UserID INT NOT NULL AUTO_INCREMENT
	,	RoleID INT NOT NUll 
	,	FirstName VARCHAR(30) NOT NULL
	,	LastName VARCHAR(30) NOT NULL
	,	UserName VARCHAR(30) NOT NULL
	,	Email VARCHAR(100) NOT NULL CHECK (Email LIKE '%_@__%.__%')
	,	Password VARCHAR(20) NOT NULL 
	,	Active BIT NOT NULL DEFAULT 1 
	,	IsVerfied BIT NOT NULL DEFAULT 0
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Users_UserID PRIMARY KEY(UserID) 	
	,	CONSTRAINT FK_Roles_Users FOREIGN KEY(RoleID) REFERENCES Roles(RoleID) ON DELETE NO ACTION ON UPDATE CASCADE
	,	CONSTRAINT UQ_Users_Email UNIQUE(Email)
	
);


-- 5. GENDER 

CREATE TABLE Gender(
		GenderID INT NOT NULL AUTO_INCREMENT
	,	Name  VARCHAR(6) NOT NULL
	,	CONSTRAINT PK_Gender_GenderID PRIMARY KEY(GenderID) 
);


-- 6. PROFILE

CREATE TABLE Profile(
		ProfileID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL
	,	DOB DATE 
	,	Bio TEXT  
	,	Picture TEXT
	,	GenderID  INT
	,	CountryID INT 
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Pofile_ProfileID PRIMARY KEY(ProfileID) 
	,	CONSTRAINT FK_Users_Profile FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Countries_Profile FOREIGN KEY(CountryID) REFERENCES Countries(CountryID) 
	,	CONSTRAINT FK_Gender_Profile FOREIGN KEY(GenderID) REFERENCES Gender(GenderID)
	,	CONSTRAINT UQ_Profile_UserID UNIQUE(UserID)
	
);



-- 7. USERLANGUAGES

CREATE TABLE UserLanguages(
		UserId INT NOT NULL
	,	LanguageID INT NOT NULL
	,	CONSTRAINT PK_UserLanguages PRIMARY KEY(UserId, LanguageID)  
	,	CONSTRAINT FK_Users_UserLanguages FOREIGN KEY(UserID) REFERENCES Users(UserID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Languages_UserLanguages FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
);

-- 8. ALBUMS

CREATE TABLE Albums(
		AlbumID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL
	,	Name VARCHAR(30) NOT NULL
	,	Picture TEXT NOT NULL
	,	Description VARCHAR(100)
	,	Premium BIT DEFAULT 0
	,	Active BIT DEFAULT 1
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	CONSTRAINT PK_Albums_AlbumID PRIMARY KEY(AlbumID)
	,	CONSTRAINT FK_Users_Albums FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 9. GENRES

CREATE TABLE Genres(
		GenreId INT NOT NULL AUTO_INCREMENT
	,	Genre VARCHAR(20) NOT NULL		
	,	CONSTRAINT PK_Genres_GenresId PRIMARY KEY(GenreId) 	
);

-- 10. SONGS

CREATE TABLE Songs(
		SongID INT NOT NULL AUTO_INCREMENT
	,	AlbumID INT 
	,	Name VARCHAR(50) NOT NULL
	,	Picture TEXT NOT NULL
	,	LanguageID INT NOT NULL
	,	SongFile TEXT NOT NULL
	,	Duration Decimal(4,2) NOT NULL
	,	PublishedON DATETIME
	,	Active BIT DEFAULT 1
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	ViewCount INT NOT NULL DEFAULT 0
	,	Downloads INT NOT NULL DEFAULT 0
	,	CONSTRAINT PK_Songs_SongID PRIMARY KEY(SongID)
	,	CONSTRAINT FK_Albums_Songs FOREIGN KEY(AlbumID) REFERENCES Albums(AlbumID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Languages_Songs FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 11. SONGGENRES

CREATE TABLE SongGenres (
		SongID INT NOT NULL
	,	GenreId INT NOT NULL
	,	CONSTRAINT PK_SongGenres PRIMARY KEY(SongID, GenreId)
	,	CONSTRAINT FK_Songs_SongGenres FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Genres_SongGenres FOREIGN KEY(GenreId) REFERENCES Genres(GenreId) ON DELETE NO ACTION ON UPDATE NO ACTION 
);

-- 12. SONGARTISTS

CREATE TABLE SongArtists(
		SongID INT NOT NULL
	,	UserID INT NOT NULL
	,	CONSTRAINT PK_SongArtists PRIMARY KEY(SongID, UserID)
	,	CONSTRAINT FK_Songs_SongArtists FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Users_SongArtists FOREIGN KEY(UserID) REFERENCES Users(UserID)  ON DELETE NO ACTION ON UPDATE NO ACTION 
);

-- 13. PODCASTS

CREATE TABLE Podcasts(
		PodcastID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL 
	,	Name VARCHAR(30) NOT NULL
	,	LanguageID INT NOT NULL
	,	PodcastFile TEXT NOT NULL  
	,	StreamedON DATETIME
	,	Duration DECIMAL(6,2) NOT NULL 
	,	Premium BIT DEFAULT 0
	,	Active BIT DEFAULT 1
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	DeletedON DATETIME 
	,	ViewCount INT NOT NULL DEFAULT 0
	,	Downloads INT NOT NULL DEFAULT 0
	,	CONSTRAINT PK_Podcasts_PodcastID PRIMARY KEY(PodcastID)
	,	CONSTRAINT FK_Users_Podcasts FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Languages_Podcasts FOREIGN KEY(LanguageID) REFERENCES Languages(LanguageID) ON DELETE CASCADE ON UPDATE CASCADE
); 

-- 14, 15, 16. LIKES

CREATE TABLE SongLike(
		UserId INT NOT NULL
	,	SongID INT NOT NULL
	,	CONSTRAINT PK_SongLike PRIMARY KEY(UserId, SongID)   
	,	CONSTRAINT FK_Users_SongLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Songs_SongLike FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION ON UPDATE NO ACTION 
);

CREATE TABLE PodcastLike(
		UserId INT NOT NULL
	,	PodcastID INT NOT NULL
	,	CONSTRAINT PK_PodcastLike PRIMARY KEY(UserId, PodcastID)   
	,	CONSTRAINT FK_Users_PodcastLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Podcasts_PodcastLike FOREIGN KEY(PodcastID) REFERENCES Podcasts(PodcastID) ON DELETE NO ACTION ON UPDATE NO ACTION 
);

CREATE TABLE AlbumLike(
		UserId INT 
	,	AlbumID INT 
	,	CONSTRAINT PK_AlbumLike PRIMARY KEY(UserId, AlbumID)   
	,	CONSTRAINT FK_Users_AlbumLike FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Albums_AlbumLike FOREIGN KEY(AlbumID) REFERENCES Albums(AlbumID) ON DELETE NO ACTION ON  UPDATE NO ACTION 
);

-- 17, 18, 19. PLAYLISTS

CREATE TABLE Playlists(
		PlaylistID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL
	,	Title VARCHAR(30) NOT NULL 
	,	CreatedON DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	,	UpdatedON DATETIME 
	,	CONSTRAINT PK_Playlists_PlaylistID PRIMARY KEY(PlaylistID)
	,	CONSTRAINT FK_Users_Playlists FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PlaylistSongs(
		PlaylistID INT NOT NULL
	,	SongID INT NOT NULL
	,	CONSTRAINT PK_PlaylistSongs PRIMARY KEY(PlaylistID, SongID) 
	,	CONSTRAINT FK_Playlists_PlaylistSongs FOREIGN KEY(PlaylistID) REFERENCES Playlists(PlaylistID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Songs_PlaylistSongs FOREIGN KEY(SongID) REFERENCES Songs(SongID) ON DELETE NO ACTION  ON UPDATE NO ACTION 
);

CREATE TABLE PlaylistPodcasts(
		PlaylistID INT NOT NULL
	,	PodcastID INT NOT NULL
	,	CONSTRAINT PK_PlaylistPodcasts PRIMARY KEY(PlaylistID, PodcastID) 
	,	CONSTRAINT FK_Playlists_PlaylistPodcasts FOREIGN KEY(PlaylistID) REFERENCES Playlists(PlaylistID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_Podcasts_PlaylistPodcasts FOREIGN KEY(PodcastID) REFERENCES Podcasts(PodcastID) ON DELETE NO ACTION  ON UPDATE NO ACTION 
);


-- 20. PLANS

CREATE TABLE Plans(
		PlanID INT NOT NULL AUTO_INCREMENT
	,	PlanName VARCHAR(20) NOT NULL
	,	PricePerMonth NUMERIC NOT NULL
	,	CONSTRAINT PK_Plan_PlanID PRIMARY KEY(PlanID)
);

-- 21. SUBSCRIPTION

CREATE TABLE Subscription(
		SubscriptionID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL
	,	PlanId INT NOT NULL
	,	Months INT NOT NULL DEFAULT  1
	,	StartTimestamp DATETIME DEFAULT CURRENT_TIMESTAMP
	,	EndTimeStamp DATETIME 
	,	CONSTRAINT PK_Subscription_SubscriptionID PRIMARY KEY(SubscriptionID)
	,	CONSTRAINT FK_Users_Subscription FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
	,	CONSTRAINT FK_Plans_Subscription FOREIGN KEY(PlanId) REFERENCES Plans(PlanId) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 22. PAYMENTMETHODS	

CREATE TABLE PaymentMethods(
		PaymentMethodID INT NOT NULL AUTO_INCREMENT 
	,	Name VARCHAR(20) NOT NULL
	,	CONSTRAINT PK_PaymentMethods_PaymentMethodID PRIMARY KEY(PaymentMethodID)
);

-- 23. PAYMENT 

CREATE TABLE Payment(
		PaymentID INT NOT NULL AUTO_INCREMENT
	,	UserID INT NOT NULL
	,	SubscriptionID INT NOT NULL
	,	PaymentMethodID INT NOT NULL
	,	PaymnetStatus BIT NOT NULL DEFAULT 0
	,	CONSTRAINT PK_Payment_PaymentID PRIMARY KEY(PaymentID)
	,	CONSTRAINT FK_Users_Payment FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE CASCADE  ON UPDATE  CASCADE
	,	CONSTRAINT FK_Subscription_Payment FOREIGN KEY(SubscriptionID) REFERENCES Subscription(SubscriptionID) ON DELETE NO ACTION ON UPDATE NO ACTION 
	,	CONSTRAINT FK_PaymentMethods_PaymentMethodID FOREIGN KEY(PaymentMethodID) REFERENCES PaymentMethods(PaymentMethodID) ON DELETE CASCADE ON UPDATE CASCADE
);

